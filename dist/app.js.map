{"version":3,"sources":["../src/app.js"],"names":["process","env","NODE_ENV","require","load","express","cookieParser","logger","bodyParser","jwt","OAuth2Client","CLIENT_ID","client","db","MONGO_PW","cors","app","use","bcrypt","saltRounds","json","urlencoded","extended","set","static","crypto","algorithm","password","CRYPTO","encrypt","text","cipher","createCipher","crypted","update","final","decrypt","decipher","createDecipher","dec","mailOptions","from","to","subject","html","fs","fetch","sendMail","mail","linky","data","readFileSync","replace","console","log","body","mailBody","method","JSON","stringify","headers","then","res","users","get","post","req","email","findOne","user","status","message","hash","err","newUser","confirmed","insert","protocol","sign","JWT_SECRET","expiresIn","token","catch","compare","resp","encryption","params","$set","page","render","getUserEmailFromToken","admin","find","d","map","u","id","_id","todoos","created","Date","parseInt","toString","substring","delete","remove","userTodos","todo","done","r","next","bearerHeader","bearer","split","bearerToken","bearerProvider","verifyIdToken","idToken","audience","ticket","getPayload","authData","verify","error"],"mappings":"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","file":"app.js","sourcesContent":["if (process.env.NODE_ENV !== 'production') {\n    require('dotenv').load();\n}\nconst express = require('express');\nvar cookieParser = require('cookie-parser');\nconst logger = require('volleyball');\nconst bodyParser = require('body-parser');\nconst jwt = require('jsonwebtoken');\nconst OAuth2Client = require('google-auth-library').OAuth2Client;\nconst CLIENT_ID = '171417293160-02sar26733jopm7hvfb6e5cgk4mq21d7.apps.googleusercontent.com';\nconst client = new OAuth2Client(CLIENT_ID);\nconst db = process.env.NODE_ENV === 'test' ?\n    require('monk')(`mongodb://testUser:${process.env.MONGO_PW}@ds018848.mlab.com:18848/to2dotest`) :\n    require('monk')(`mongodb://dbreadwrite:${process.env.MONGO_PW}@ds018708.mlab.com:18708/to2so`);\nconst cors = require('cors');\n// const getUserEmailFromToken = require('./auth/auth');\n\nconst app = express();\napp.use(cors());\n\nconst bcrypt = require('bcrypt');\nconst saltRounds = 10;\n//const crypto = require('./auth/crypt');\n//const mailer = require('./mailer/mailer');\napp.use(cookieParser());\napp.use(logger);\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n    extended: true\n}));\napp.set('view engine', 'ejs');\napp.use(express.static('public'));\n\nconst crypto = require('crypto');\nconst algorithm = 'aes-256-ctr';\nconst password = process.env.CRYPTO;\nconst encrypt = (text) => {\n    var cipher = crypto.createCipher(algorithm, password);\n    var crypted = cipher.update(text, 'utf8', 'hex');\n    crypted += cipher.final('hex');\n    return crypted;\n\n};\nconst decrypt = (text) => {\n    var decipher = crypto.createDecipher(algorithm, password);\n    var dec = decipher.update(text, 'hex', 'utf8');\n    dec += decipher.final('utf8');\n    return dec;\n};\n\nconst mailOptions = {\n    from: 'noreply', // sender address??\n    to: 'thomas.maclean@gmail.com', // list of receivers\n    subject: 'Subject of your email', // Subject line\n    html: '<p>Your html here test</p>' // plain text body\n};\nlet fs = require('fs');\nconst fetch = require('node-fetch');\n\nconst sendMail = (mail, linky) => {\n    let data = fs.readFileSync('./public/mail.html', 'utf8');\n    mailOptions.html = data.replace('{{{link}}}', linky);\n    mailOptions.to = mail;\n    console.log('sending mail ✉️');\n\n    var body = {\n        mailBody: mailOptions.html,\n        mail\n    };\n    fetch('https://p0dmber89l.execute-api.eu-west-1.amazonaws.com/dev/mail', {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    })\n        .then(res => res.json())\n        .then(json => console.log(json));\n};\n\nlet users = db.get('users');\n\napp.post('/signup', (req, res) => {\n    const {\n        password,\n        email\n    } = req.body;\n    console.log(email + ' start signup');\n\n    users.findOne({\n        email\n    }).then(user => {\n        if (user) {\n            res.status(403).json({\n                message: 'allready a user'\n            });\n        } else {\n            bcrypt.hash(password, saltRounds, function (err, hash) {\n                const newUser = {\n                    email,\n                    password: hash,\n                    confirmed: false\n                };\n                console.log(newUser);\n\n                users.insert(newUser).then(user => {\n                    sendMail(email, req.protocol + '://' + req.get('host') + '/confirm/' + encrypt(email));\n                    jwt.sign({\n                        user\n                    }, process.env.JWT_SECRET, {\n                        expiresIn: '300s'\n                    }, (err, token) => {\n                        res.status(200).json({\n                            token\n                        });\n                    });\n                });\n            });\n        }\n    }).catch(err => {\n        res.status(200).json({\n            err\n        });\n    });\n});\n\napp.post('/login', (req, res) => {\n    const {\n        password,\n        email\n    } = req.body;\n    users.findOne({\n        email\n    }).then(user => {\n        bcrypt.compare(password, user.password, function (err, resp) {\n            if (resp) {\n                jwt.sign({\n                    user\n                }, process.env.JWT_SECRET, {\n                    expiresIn: '3000s'\n                }, (err, token) => {\n                    res.status(200).json({\n                        token\n                    });\n                });\n            } else {\n                res.status(403).json({\n                    message: 'wrong password'\n                });\n            }\n        });\n    }).catch(() => res.status(403).json({\n        message: 'wrong user'\n    }));\n\n\n});\n\napp.get('/confirm/:encryption', (req, res) => {\n    var encryption = req.params.encryption;\n    const email = decrypt(encryption);\n\n    users.update({\n        email: email\n    }, {\n        $set: {\n            confirmed: true\n        }\n    }).then(() => {\n        const page = process.env.NODE_ENV === 'production' ?\n            'index' : 'index-dev';\n        res.render(page);\n    }).catch(err => res.status(403).json(err));\n});\n\napp.get('/allusers', getUserEmailFromToken, (req, res) => {\n    if (req.admin) {\n        users.find().then(d => {\n\n            res.status(200).json(d.map(u => {\n                return {\n                    email: u.email,\n                    id: u._id,\n                    confirmed: u.confirmed,\n                    todoos: [],\n                    created: new Date(parseInt(u._id.toString().substring(0, 8), 16) * 1000)\n                };\n            }));\n        });\n    } else {\n        res.status(403);\n    }\n});\n\napp.get('/isadmin', getUserEmailFromToken, (req, res) => {\n    res.status(200).json({\n        admin: req.admin\n    });\n});\n\napp.post('/todoForUser', getUserEmailFromToken, (req, res) => {\n    if (req.admin) {\n        const email = req.body.email;\n        db.get(email).find().then(d => res.status(200).json(d));\n    } else {\n        res.status(403);\n    }\n});\n\napp.delete('/deleteUser', getUserEmailFromToken, (req, res) => {\n    const email = req.body.email;\n    if (req.admin) {\n        users.remove({\n            email: email\n        }).then(() => {\n            let userTodos = db.get(email);\n            userTodos.remove({}).then(d => res.status(200).json(d));\n        });\n    } else {\n        res.status(403);\n    }\n});\n// app.post('/users', getUserEmailFromToken, (req, res) => {\n//     users.insert({\n//         authData,\n//         email: req.body.user\n//     }).then(r => res.status(200).json(r));\n// });\n\napp.post('/addtodo', getUserEmailFromToken, (req, res) => {\n    let userTodos = db.get(req.token);\n    userTodos.insert({\n        todo: req.body.todo,\n        done: false\n    }).then(r => res.status(200).json(r));\n});\n\napp.post('/toggleDone', getUserEmailFromToken, (req, res) => {\n    let userTodos = db.get(req.token);\n    userTodos.update({\n        _id: req.body.id\n    }, {\n        $set: {\n            done: req.body.done\n        }\n    }).then(d => res.status(200).json(d));\n});\n\napp.delete('/deleteTodo', getUserEmailFromToken, (req, res) => {\n    let userTodos = db.get(req.token);\n    userTodos.remove({\n        _id: req.body.id\n    }).then(d => res.status(200).json(d));\n});\n\napp.get('/todoos', getUserEmailFromToken, (req, res) => {\n    let userTodos = db.get(req.token);\n    userTodos.find().then(d => {\n        res.status(200).json(d);\n    });\n});\n\napp.get('/ping', (req, res) => {\n    res.status(200).json({\n        'message': 'pong'\n    });\n});\n\napp.get('*/*', (req, res) => {\n    res.status(200).json({\n        'message': 'path not found...'\n    });\n});\n\nfunction getUserEmailFromToken(req, res, next) {\n    const bearerHeader = req.headers['authorization'];\n    // check blacklisted\n\n    if (typeof bearerHeader !== 'undefined') {\n        const bearer = bearerHeader.split(' ');\n        const bearerToken = bearer[1];\n        const bearerProvider = bearer[0];\n\n        if (bearerProvider === 'Google') {\n            client.verifyIdToken({\n                idToken: bearerToken,\n                audience: CLIENT_ID\n            }).then(ticket => {\n                req.token = ticket.getPayload().email;\n                if (ticket.getPayload().email === 'thomas.maclean@gmail.com') {\n                    req.admin = true;\n                }\n                next();\n            }).catch(err => {\n                console.log(err);\n\n                res.status(403).json({\n                    'err': 'faulty google token'\n                });\n            });\n        } else {\n            try {\n                let authData = jwt.verify(bearerToken, process.env.JWT_SECRET); //, (err, authData) => {\n                const email = authData.user.email;\n\n                if (email === 'thomas.maclean@gmail.com') {\n                    console.log('USER IS ADMIN');\n                    req.admin = true;\n                }\n                users.findOne({\n                    email\n                }).then(user => {\n                    if (user.confirmed) {\n                        console.log('USER IS CONFIRMED');\n\n                        req.token = email;\n                        next();\n                    } else {\n                        console.log('CONFIRM');\n\n                        res.status(403).json({\n                            message: 'not yet confirmed!'\n                        });\n                    }\n                }).catch(err => {\n                    console.log('TIS NENERREUR');\n\n                    console.log(err);\n                    res.status(403).json(err);\n                });\n            } catch (error) {\n                console.log('eRROOOOOORRRRR');\n                console.log(error);\n                res.status(403).json(error);\n            }\n        }\n    } else {\n        res.status(403).json({\n            err: 'no authorization token!!!'\n        });\n    }\n}\n\n//app.listen(process.env.PORT || 5001, () => console.log('All is ok, sit back and relax!'));\nexport default app;"]}