{"version":3,"file":"server_production.js","sources":["../src/app.js","../src/server.js"],"sourcesContent":["if (process.env.NODE_ENV !== 'production') {\n    require('dotenv').load();\n}\nconst express = require('express');\nvar cookieParser = require('cookie-parser');\nconst logger = require('volleyball');\nconst bodyParser = require('body-parser');\nconst jwt = require('jsonwebtoken');\nconst OAuth2Client = require('google-auth-library').OAuth2Client;\nconst CLIENT_ID = '171417293160-02sar26733jopm7hvfb6e5cgk4mq21d7.apps.googleusercontent.com';\nconst client = new OAuth2Client(CLIENT_ID);\nconst db = process.env.NODE_ENV === 'test' ?\n    require('monk')(`mongodb://testUser:${process.env.MONGO_PW}@ds018848.mlab.com:18848/to2dotest`) :\n    require('monk')(`mongodb://dbreadwrite:${process.env.MONGO_PW}@ds018708.mlab.com:18708/to2so`);\nconst cors = require('cors');\n// const getUserEmailFromToken = require('./auth/auth');\n\nconst app = express();\napp.use(cors());\n\nconst bcrypt = require('bcrypt');\nconst saltRounds = 10;\n//const crypto = require('./auth/crypt');\n//const mailer = require('./mailer/mailer');\napp.use(cookieParser());\napp.use(logger);\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n    extended: true\n}));\napp.set('view engine', 'ejs');\napp.use(express.static('public'));\n\nconst crypto = require('crypto');\nconst algorithm = 'aes-256-ctr';\nconst password = process.env.CRYPTO;\nconst encrypt = (text) => {\n    var cipher = crypto.createCipher(algorithm, password);\n    var crypted = cipher.update(text, 'utf8', 'hex');\n    crypted += cipher.final('hex');\n    return crypted;\n\n};\nconst decrypt = (text) => {\n    var decipher = crypto.createDecipher(algorithm, password);\n    var dec = decipher.update(text, 'hex', 'utf8');\n    dec += decipher.final('utf8');\n    return dec;\n};\n\nconst mailOptions = {\n    from: 'noreply', // sender address??\n    to: 'thomas.maclean@gmail.com', // list of receivers\n    subject: 'Subject of your email', // Subject line\n    html: '<p>Your html here test</p>' // plain text body\n};\nlet fs = require('fs');\nconst fetch = require('node-fetch');\n\nconst sendMail = (mail, linky) => {\n    let data = fs.readFileSync('./public/mail.html', 'utf8');\n    mailOptions.html = data.replace('{{{link}}}', linky);\n    mailOptions.to = mail;\n    console.log('sending mail ✉️');\n\n    var body = {\n        mailBody: mailOptions.html,\n        mail\n    };\n    fetch('https://p0dmber89l.execute-api.eu-west-1.amazonaws.com/dev/mail', {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    })\n        .then(res => res.json())\n        .then(json => console.log(json));\n};\n\nlet users = db.get('users');\n\napp.post('/signup', (req, res) => {\n    const {\n        password,\n        email\n    } = req.body;\n    console.log(email + ' start signup');\n\n    users.findOne({\n        email\n    }).then(user => {\n        if (user) {\n            res.status(403).json({\n                message: 'allready a user'\n            });\n        } else {\n            bcrypt.hash(password, saltRounds, function (err, hash) {\n                const newUser = {\n                    email,\n                    password: hash,\n                    confirmed: false\n                };\n                console.log(newUser);\n\n                users.insert(newUser).then(user => {\n                    sendMail(email, req.protocol + '://' + req.get('host') + '/confirm/' + encrypt(email));\n                    jwt.sign({\n                        user\n                    }, process.env.JWT_SECRET, {\n                        expiresIn: '300s'\n                    }, (err, token) => {\n                        res.status(200).json({\n                            token\n                        });\n                    });\n                });\n            });\n        }\n    }).catch(err => {\n        res.status(200).json({\n            err\n        });\n    });\n});\n\napp.post('/login', (req, res) => {\n    const {\n        password,\n        email\n    } = req.body;\n    users.findOne({\n        email\n    }).then(user => {\n        bcrypt.compare(password, user.password, function (err, resp) {\n            if (resp) {\n                jwt.sign({\n                    user\n                }, process.env.JWT_SECRET, {\n                    expiresIn: '3000s'\n                }, (err, token) => {\n                    res.status(200).json({\n                        token\n                    });\n                });\n            } else {\n                res.status(403).json({\n                    message: 'wrong password'\n                });\n            }\n        });\n    }).catch(() => res.status(403).json({\n        message: 'wrong user'\n    }));\n\n\n});\n\napp.get('/confirm/:encryption', (req, res) => {\n    var encryption = req.params.encryption;\n    const email = decrypt(encryption);\n\n    users.update({\n        email: email\n    }, {\n        $set: {\n            confirmed: true\n        }\n    }).then(() => {\n        const page = process.env.NODE_ENV === 'production' ?\n            'index' : 'index-dev';\n        res.render(page);\n    }).catch(err => res.status(403).json(err));\n});\n\napp.get('/allusers', getUserEmailFromToken, (req, res) => {\n    if (req.admin) {\n        users.find().then(d => {\n\n            res.status(200).json(d.map(u => {\n                return {\n                    email: u.email,\n                    id: u._id,\n                    confirmed: u.confirmed,\n                    todoos: [],\n                    created: new Date(parseInt(u._id.toString().substring(0, 8), 16) * 1000)\n                };\n            }));\n        });\n    } else {\n        res.status(403);\n    }\n});\n\napp.get('/isadmin', getUserEmailFromToken, (req, res) => {\n    res.status(200).json({\n        admin: req.admin\n    });\n});\n\napp.post('/todoForUser', getUserEmailFromToken, (req, res) => {\n    if (req.admin) {\n        const email = req.body.email;\n        db.get(email).find().then(d => res.status(200).json(d));\n    } else {\n        res.status(403);\n    }\n});\n\napp.delete('/deleteUser', getUserEmailFromToken, (req, res) => {\n    const email = req.body.email;\n    if (req.admin) {\n        users.remove({\n            email: email\n        }).then(() => {\n            let userTodos = db.get(email);\n            userTodos.remove({}).then(d => res.status(200).json(d));\n        });\n    } else {\n        res.status(403);\n    }\n});\n// app.post('/users', getUserEmailFromToken, (req, res) => {\n//     users.insert({\n//         authData,\n//         email: req.body.user\n//     }).then(r => res.status(200).json(r));\n// });\n\napp.post('/addtodo', getUserEmailFromToken, (req, res) => {\n    let userTodos = db.get(req.token);\n    userTodos.insert({\n        todo: req.body.todo,\n        done: false\n    }).then(r => res.status(200).json(r));\n});\n\napp.post('/toggleDone', getUserEmailFromToken, (req, res) => {\n    let userTodos = db.get(req.token);\n    userTodos.update({\n        _id: req.body.id\n    }, {\n        $set: {\n            done: req.body.done\n        }\n    }).then(d => res.status(200).json(d));\n});\n\napp.delete('/deleteTodo', getUserEmailFromToken, (req, res) => {\n    let userTodos = db.get(req.token);\n    userTodos.remove({\n        _id: req.body.id\n    }).then(d => res.status(200).json(d));\n});\n\napp.get('/todoos', getUserEmailFromToken, (req, res) => {\n    let userTodos = db.get(req.token);\n    userTodos.find().then(d => {\n        res.status(200).json(d);\n    });\n});\n\napp.get('/ping', (req, res) => {\n    res.status(200).json({\n        'message': 'pong'\n    });\n});\n\napp.get('*/*', (req, res) => {\n    res.status(200).json({\n        'message': 'path not found...'\n    });\n});\n\nfunction getUserEmailFromToken(req, res, next) {\n    const bearerHeader = req.headers['authorization'];\n    // check blacklisted\n\n    if (typeof bearerHeader !== 'undefined') {\n        const bearer = bearerHeader.split(' ');\n        const bearerToken = bearer[1];\n        const bearerProvider = bearer[0];\n\n        if (bearerProvider === 'Google') {\n            client.verifyIdToken({\n                idToken: bearerToken,\n                audience: CLIENT_ID\n            }).then(ticket => {\n                req.token = ticket.getPayload().email;\n                if (ticket.getPayload().email === 'thomas.maclean@gmail.com') {\n                    req.admin = true;\n                }\n                next();\n            }).catch(err => {\n                console.log(err);\n\n                res.status(403).json({\n                    'err': 'faulty google token'\n                });\n            });\n        } else {\n            try {\n                let authData = jwt.verify(bearerToken, process.env.JWT_SECRET); //, (err, authData) => {\n                const email = authData.user.email;\n\n                if (email === 'thomas.maclean@gmail.com') {\n                    console.log('USER IS ADMIN');\n                    req.admin = true;\n                }\n                users.findOne({\n                    email\n                }).then(user => {\n                    if (user.confirmed) {\n                        console.log('USER IS CONFIRMED');\n\n                        req.token = email;\n                        next();\n                    } else {\n                        console.log('CONFIRM');\n\n                        res.status(403).json({\n                            message: 'not yet confirmed!'\n                        });\n                    }\n                }).catch(err => {\n                    console.log('TIS NENERREUR');\n\n                    console.log(err);\n                    res.status(403).json(err);\n                });\n            } catch (error) {\n                console.log('eRROOOOOORRRRR');\n                console.log(error);\n                res.status(403).json(error);\n            }\n        }\n    } else {\n        res.status(403).json({\n            err: 'no authorization token!!!'\n        });\n    }\n}\n\n//app.listen(process.env.PORT || 5001, () => console.log('All is ok, sit back and relax!'));\nexport default app;","import app from './app';\n\napp.listen(process.env.PORT || 5001, () => console.log('All is ok, sit back and relax!'));"],"names":["process","env","NODE_ENV","load","express","require","cookieParser","logger","bodyParser","jwt","OAuth2Client","CLIENT_ID","client","db","MONGO_PW","cors","app","use","bcrypt","saltRounds","json","urlencoded","set","static","crypto","algorithm","password","CRYPTO","encrypt","text","cipher","createCipher","crypted","update","final","decrypt","decipher","createDecipher","dec","mailOptions","fs","fetch","sendMail","mail","linky","data","readFileSync","html","replace","to","log","body","JSON","stringify","then","res","console","users","get","post","req","email","findOne","user","status","hash","err","newUser","insert","protocol","sign","JWT_SECRET","token","catch","compare","resp","encryption","params","page","render","getUserEmailFromToken","admin","find","d","map","u","_id","confirmed","Date","parseInt","toString","substring","delete","remove","userTodos","todo","r","id","done","next","bearerHeader","headers","bearer","split","bearerToken","bearerProvider","verifyIdToken","ticket","getPayload","authData","verify","error","listen","PORT"],"mappings":"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"}