{"version":3,"file":"server_production.js","sources":["../src/auth/auth.js","../src/mailer/mailer.js","../src/auth/crypt.js","../src/app.js","../src/server.js"],"sourcesContent":["const OAuth2Client = require('google-auth-library').OAuth2Client;\nconst CLIENT_ID = '171417293160-02sar26733jopm7hvfb6e5cgk4mq21d7.apps.googleusercontent.com';\nconst client = new OAuth2Client(CLIENT_ID);\nconst jwt = require('jsonwebtoken');\nconst db = process.env.NODE_ENV === 'test' ?\n    require('./../../mocks/monkey')('mon@ds018848.mlab.com:18848/to2dotest') :\n    require('monk')(`mongodb://dbreadwrite:${process.env.MONGO_PW}@ds018708.mlab.com:18708/to2so`);\nlet users = db.get('users'); //k\n\n\n\nexport function getUserEmailFromToken(req, res, next) {\n\n    console.log(process.env.NODE_ENV);\n\n\n    const bearerHeader = req.headers['authorization'];\n    if (typeof bearerHeader !== 'undefined') {\n        const bearer = bearerHeader.split(' ');\n        const bearerToken = bearer[1];\n        const bearerProvider = bearer[0];\n        console.log(bearerToken);\n\n        if (bearerProvider === 'Google') {\n            client.verifyIdToken({\n                idToken: bearerToken,\n                audience: CLIENT_ID\n            }).then(ticket => {\n                req.token = ticket.getPayload().email;\n                if (ticket.getPayload().email === 'thomas.maclean@gmail.com') {\n                    req.admin = true;\n                }\n                next();\n            }).catch(err => {\n                console.log(err);\n\n                res.status(403).json({\n                    'err': 'faulty google token'\n                });\n            });\n        } else {\n            try {\n\n                let authData = jwt.verify(bearerToken, process.env.JWT_SECRET); //, (err, authData) => {\n                console.log(authData);\n\n                const email = authData.user.email;\n                console.log('EEEEemail');\n                console.log(email);\n\n                if (email === 'thomas.maclean@gmail.com') {\n                    req.admin = true;\n                }\n                users.findOne({\n                    email\n                }).then(user => {\n                    if (user.confirmed) {\n                        console.log('USER IS CONFIRMED');\n\n                        req.token = email;\n                        next();\n                    } else {\n                        console.log('CONFIRMMMMM???');\n\n                        res.status(403).json({\n                            message: 'not yet confirmed!'\n                        });\n                    }\n                }).catch(err => {\n                    console.log('TIS NENERREUR');\n\n                    console.log(err);\n                    res.status(403).json(err);\n                });\n            } catch (error) {\n                console.log('eRROOOOOORRRRR');\n                console.log(error);\n                res.status(403).json(error);\n            }\n        }\n    } else {\n        res.status(403).json({\n            err: 'no authorization token!'\n        });\n    }\n}","let fs = require('fs');\nconst fetch = require('node-fetch');\nconst mailOptions = {\n    from: 'noreply', // sender address??\n    to: 'thomas.maclean@gmail.com', // list of receivers\n    subject: 'Subject of your email', // Subject line\n    html: '<p>Your html here test</p>' // plain text body\n};\n\nexport let sendMail = (mail, linky) => {\n    let data = fs.readFileSync('./public/mail.html', 'utf8');\n    data = data.replace('{{{year}}}', new Date().getFullYear());\n    mailOptions.html = data.replace('{{{link}}}', linky);\n    mailOptions.to = mail;\n    console.log('sending mail ✉️');\n\n    var body = {\n        mailBody: mailOptions.html,\n        mail\n    };\n    fetch('https://p0dmber89l.execute-api.eu-west-1.amazonaws.com/dev/mail', {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    })\n        .then(res => res.json())\n        .then(json => console.log(json));\n};\n","const crypto = require('crypto');\nconst algorithm = 'aes-256-ctr';\nconst password = process.env.CRYPTO;\n\nexport let encrypt = text => {\n    var cipher = crypto.createCipher(algorithm, password);\n    var crypted = cipher.update(text, 'utf8', 'hex');\n    crypted += cipher.final('hex');\n    return crypted;\n};\nexport let decrypt = text => {\n    console.log('DECRYPTING 🔬');\n\n    console.log(text);\n\n    try {\n        var decipher = crypto.createDecipher(algorithm, password);\n        var dec = decipher.update(text, 'hex', 'utf8');\n        dec += decipher.final('utf8');\n        console.log(dec);\n\n        return dec;\n    } catch (error) {\n        console.log(error);\n        console.log('IT WENT BAD, RETURNING ' + text);\n\n        return text;\n    }\n};\n\nexport default crypto;\n","import { getUserEmailFromToken } from './auth/auth';\nconst express = require('express');\nconst cookieParser = require('cookie-parser');\nconst logger = require('volleyball');\nconst bodyParser = require('body-parser');\nconst jwt = require('jsonwebtoken');\n\nconst db =\n  process.env.NODE_ENV === 'test'\n      ? require('./../mocks/monkey')(\n          `mongodb://testUser:${\n              process.env.MONGO_PW\n          }@ds018848.mlab.com:18848/to2dotest`\n      )\n      : require('monk')(\n          `mongodb://dbreadwrite:${\n              process.env.MONGO_PW\n          }@ds018708.mlab.com:18708/to2so`\n      );\nconst cors = require('cors');\n\nconst app = express();\napp.use(cors());\n\nconst bcrypt = require('bcrypt');\nconst saltRounds = 10;\n\napp.use(cookieParser());\napp.use(logger);\napp.use(bodyParser.json());\napp.use(\n    bodyParser.urlencoded({\n        extended: true\n    })\n);\n//const path = require('path');\napp.set('views', './src/views');\napp.set('view engine', 'ejs');\napp.use(express.static('public'));\n\n/**\n * @api {get} /ping Test server\n * @apiName GetPing\n * @apiGroup To2Do\n * @apiVersion 1.0.0\n *\n * @apiSuccess {String} pong Always returns pong\n */\napp.get('/ping', (req, res) => {\n    res.status(200).json({\n        message: 'pong'\n    });\n});\n\nimport { sendMail } from './mailer/mailer';\n\nimport { encrypt, decrypt } from './auth/crypt';\n\nlet users = db.get('users');\n\n/**\n * @api {post} /signup Sign up a new user\n * @apiName PostSignup\n * @apiGroup To2Do\n * @apiVersion 1.0.0\n * @apiParam {String} email     Mandatory email.\n * @apiParam {String} password     Mandatory password.\n *\n * @apiSuccess {String} token It returns a JWT\n * @apiError (403) {Object} message On error 403 it sets message\n */\napp.post('/signup', (req, res) => {\n    const { password, email } = req.body;\n    console.log(email + ' start signup');\n\n    users\n        .findOne({\n            email\n        })\n        .then(user => {\n            if (user) {\n                res.status(403).json({\n                    message: 'allready a user'\n                });\n            } else {\n                bcrypt.hash(password, saltRounds, function(err, hash) {\n                    const newUser = {\n                        email,\n                        password: hash,\n                        confirmed: false\n                    };\n                    console.log(newUser);\n\n                    users.insert(newUser).then(user => {\n                        sendMail(\n                            email,\n                            req.protocol +\n                '://' +\n                req.get('host') +\n                '/confirm/' +\n                encrypt(email)\n                        );\n                        jwt.sign(\n                            {\n                                user\n                            },\n                            process.env.JWT_SECRET,\n                            (err, token) => {\n                                res.status(200).json({\n                                    token\n                                });\n                            }\n                        );\n                    });\n                });\n            }\n        })\n        .catch(err => {\n            res.status(200).json({\n                err\n            });\n        });\n});\n\n/**\n * @api {post} /login Log in a user\n * @apiName PostLogin\n * @apiGroup To2Do\n *  @apiVersion 1.0.0\n\n * @apiParam {String} email     Mandatory email.\n * @apiParam {String} password     Mandatory password.\n *\n * @apiSuccess {String} token It returns a JWT\n * @apiError (403) {Object} message On error 403 it sets message\n */\napp.post('/login', (req, res) => {\n    const { password, email } = req.body;\n\n    try {\n        users\n            .findOne({\n                email\n            })\n            .then(user => {\n                if (!user.password) {\n                    res.status(403).json({\n                        message: 'social login?'\n                    });\n                    return;\n                }\n\n                bcrypt.compare(password, user.password, function(err, resp) {\n                    if (resp) {\n                        jwt.sign(\n                            {\n                                user\n                            },\n                            process.env.JWT_SECRET,\n                            (err, token) => {\n                                res.status(200).json({\n                                    token\n                                });\n                            }\n                        );\n                    } else {\n                        res.status(403).json({\n                            message: 'wrong password'\n                        });\n                    }\n                });\n            })\n            .catch(() =>\n                res.status(403).json({\n                    message: 'wrong user'\n                })\n            );\n    } catch (error) {\n        console.log('IT WENT APESH*T 🐒');\n\n        console.log(error);\n    }\n});\n\n/**\n * @api {get} /confirm/:encryption Confirm emailaddress\n * @apiName GetConfirm\n * @apiGroup To2Do\n * @apiVersion 1.0.0\n *\n * @apiParam {String} encryption    .\n *\n * @apiSuccess {Page} index it returns a HTML page\n * @apiError (403) {Error} error\n */\napp.get('/confirm/:encryption', (req, res) => {\n    var encryption = req.params.encryption;\n    const email = decrypt(encryption);\n\n    console.log(encryption);\n    users\n        .update(\n            {\n                email: email\n            },\n            {\n                $set: {\n                    confirmed: true\n                }\n            }\n        )\n        .then(() => {\n            const page =\n        process.env.NODE_ENV === 'production' ? 'index' : 'index-dev';\n            res.render(page);\n        })\n        .catch(err => res.status(403).json(err));\n});\n\n/**\n * @api {post} /loginGoogle Place google login user in database\n * @apiName PostLoginGoogle\n * @apiGroup To2Do\n * @apiVersion 1.0.0\n *\n * @apiHeader {String} Authorization Google Token\n *\n * @apiParam {String} name Mandatory name.\n *\n * @apiError (403) {Object} message On error 403 it sets message\n */\napp.post('/loginGoogle', getUserEmailFromToken, (req, res) => {\n    const email = req.token;\n    const name = req.body.name;\n    users\n        .findOne({\n            email\n        })\n        .then(user => {\n            if (user) {\n                console.log('allready a user');\n            } else {\n                const newUser = {\n                    email,\n                    confirmed: true,\n                    name,\n                    google: true\n                };\n                console.log(newUser);\n\n                users.insert(newUser);\n            }\n        })\n        .catch(err => {\n            res.status(403).json(err);\n        });\n});\n\n/**\n * @api {get} /admin/allusers Get all the users\n * @apiName GetAdminAllusers\n * @apiGroup To2Do\n * @apiVersion 1.0.0\n *\n * @apiHeader {String} Authorization Token\n *\n * @apiSuccess {Object} users A list of all the users\n *\n * @apiError (403) Error\n */\napp.get('/admin/allusers', getUserEmailFromToken, (req, res) => {\n    if (req.admin) {\n        users.find().then(d => {\n            res.status(200).json(\n                d.map(u => {\n                    return {\n                        email: u.email,\n                        id: u._id,\n                        confirmed: u.confirmed,\n                        todoos: [],\n                        created: new Date(\n                            parseInt(u._id.toString().substring(0, 8), 16) * 1000\n                        )\n                    };\n                })\n            );\n        });\n    } else {\n        res.status(403);\n    }\n});\n\n/**\n * @api {get} /admin/isadmin Check if user from token is admin\n * @apiName GetAdminIsAdmin\n * @apiGroup To2Do\n * @apiVersion 1.0.0\n *\n * @apiHeader {String} Authorization Token\n *\n * @apiSuccess {Object} admin A Boolean\n *\n */\napp.get('/admin/isadmin', getUserEmailFromToken, (req, res) => {\n    res.status(200).json({\n        admin: req.admin\n    });\n});\n\n/**\n * @api {post} /admin/todoForUser Get todoos for a user\n * @apiName GetAdminTodoForUser\n * @apiGroup To2Do\n * @apiVersion 1.0.0\n *\n * @apiHeader {String} Authorization Token\n * @apiParam {String} email Mandatory email.\n *\n * @apiSuccess {Object} todoos A list of all the todoos\n * @apiError (403) Error\n *\n */\napp.post('/admin/todoForUser', getUserEmailFromToken, (req, res) => {\n    if (req.admin) {\n        const email = req.body.email;\n        db.get(email)\n            .find()\n            .then(d => res.status(200).json(d));\n    } else {\n        res.status(403);\n    }\n});\n\n/**\n * @api {delete} /admin/deleteUser Delete A User\n * @apiName DeleteAdminDeleteUser\n * @apiGroup To2Do\n * @apiVersion 1.0.0\n *\n * @apiHeader {String} Authorization Token\n * @apiParam {String} email Mandatory email.\n *\n * @apiSuccess {Object} mongoResponse.\n * @apiError (403) Error\n *\n */\napp.delete('/admin/deleteUser', getUserEmailFromToken, (req, res) => {\n    const email = req.body.email;\n    if (req.admin) {\n        users\n            .remove({\n                email: email\n            })\n            .then(() => {\n                let userTodos = db.get(email);\n                userTodos.remove({}).then(d => res.status(200).json(d));\n            });\n    } else {\n        res.status(403);\n    }\n});\n\n/**\n * @api {post} /addtodo Add a Todo\n * @apiName PostAddTodo\n * @apiGroup To2Do\n * @apiVersion 1.0.0\n *\n * @apiHeader {String} Authorization Token\n * @apiParam {String} todo Mandatory todo.\n *\n * @apiSuccess {Object} todo Returns the Todo.\n * @apiError (403) Error\n *\n */\napp.post('/addtodo', getUserEmailFromToken, (req, res) => {\n    let userTodos = db.get(req.token);\n    userTodos\n        .insert({\n            todo: encrypt(req.body.todo),\n            timeStamp: req.body.timeStamp,\n            done: false,\n            encrypt: true\n        })\n        .then(r => {\n            r.todo = decrypt(r.todo);\n            return res.status(200).json(r);\n        });\n});\n\n/**\n * @api {post} /toggleDone Toggle status of Todo\n * @apiName PostToggleTodo\n * @apiGroup To2Do\n * @apiVersion 1.0.0\n *\n * @apiHeader {String} Authorization Token\n * @apiParam {string} id Mandatory id.\n * @apiParam {boolean} done Mandatory done.\n *\n * @apiSuccess {Object} mongo Returns mongo response.\n * @apiError (403) Error\n *\n */\napp.post('/toggleDone', getUserEmailFromToken, (req, res) => {\n    let userTodos = db.get(req.token);\n    userTodos\n        .update(\n            {\n                _id: req.body.id\n            },\n            {\n                $set: {\n                    done: req.body.done\n                }\n            }\n        )\n        .then(d => res.status(200).json(d));\n});\n\n/**\n * @api {delete} /todo Deletes a Todo\n * @apiName DeleteTodo\n * @apiGroup To2Do\n * @apiVersion 1.0.0\n *\n * @apiHeader {String} Authorization Token\n * @apiParam {string} id Mandatory id.\n *\n * @apiSuccess {Object}  mongo Returns mongo response.\n * @apiError (403) Error\n *\n */\napp.delete('/deleteTodo', getUserEmailFromToken, (req, res) => {\n    let userTodos = db.get(req.token);\n    userTodos\n        .remove({\n            _id: req.body.id\n        })\n        .then(d => res.status(200).json(d));\n});\n\n/**\n * @api {get} /todoos Get all todoos\n * @apiName GetTodoos\n * @apiGroup To2Do\n * @apiVersion 1.0.0\n *\n * @apiHeader {String} Authorization Token\n *\n * @apiSuccess {Object}  todoos List of all the todoos\n * @apiSuccess {string}  user The user's name or email.\n * @apiError (403) Error\n *\n */\napp.get('/todoos', getUserEmailFromToken, (req, res) => {\n    users\n        .findOne({\n            email: req.token\n        })\n        .then(findUser => {\n            let userTodos = db.get(req.token);\n            userTodos.find().then(d => {\n                console.log('GETTING TODOOS');\n\n                d.forEach(dd => {\n                    if (dd.encrypt) {\n                        dd.todo = decrypt(dd.todo);\n                    }\n                });\n\n                console.log(d);\n\n                res.status(200).json({\n                    todoos: d,\n                    user: findUser.name || req.token\n                });\n            });\n        });\n});\n\n/**\n * @api {get} /* Fallback\n * @apiName GetStar\n * @apiGroup To2Do\n * @apiVersion 1.0.0\n *\n * @apiSuccess {string}  message Path not found...\n *\n */\napp.get('*/*', (req, res) => {\n    res.status(200).json({\n        message: 'path not found...'\n    });\n});\n\n//app.listen(process.env.PORT || 5001, () => console.log('All is ok, sit back and relax!'));\nexport default app;\n","import app from './app';\n\napp.listen(process.env.PORT || 5001, () => console.log('All is ok, sit back and relax!'));"],"names":["OAuth2Client","require","CLIENT_ID","client","jwt","db","process","env","NODE_ENV","MONGO_PW","users","get","getUserEmailFromToken","req","res","next","log","bearerHeader","headers","bearer","split","bearerToken","bearerProvider","verifyIdToken","then","token","ticket","getPayload","email","admin","catch","err","status","json","authData","verify","JWT_SECRET","user","findOne","confirmed","error","fs","fetch","mailOptions","sendMail","mail","linky","data","readFileSync","replace","Date","getFullYear","html","to","body","JSON","stringify","console","crypto","algorithm","password","CRYPTO","encrypt","cipher","createCipher","crypted","update","text","final","decrypt","decipher","createDecipher","dec","express","cookieParser","logger","bodyParser","cors","app","use","bcrypt","saltRounds","urlencoded","set","static","post","hash","newUser","insert","protocol","sign","compare","resp","encryption","params","page","render","name","find","d","map","u","_id","parseInt","toString","substring","delete","remove","userTodos","todo","timeStamp","r","id","done","forEach","dd","findUser","listen","PORT"],"mappings":"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"}